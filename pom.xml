<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>io.zeebe.clickhouse</groupId>
    <artifactId>zeebe-clickhouse-exporter</artifactId>
    <packaging>jar</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>zeebe-clickhouse-exporter</name>

    <parent>
        <groupId>org.camunda.community</groupId>
        <artifactId>community-hub-release-parent</artifactId>
        <version>1.4.4</version>
        <relativePath/>
    </parent>

    <licenses>
      <license>
        <name>Zeebe Community License v1.1</name>
        <url>https://zeebe.io/legal/zeebe-community-license-1.1</url>
      </license>
    </licenses>

    <properties>
      <!-- release parent settings -->
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <version.java>17</version.java>
      <nexus.snapshot.repository>
        https://artifacts.camunda.com/artifactory/zeebe-io-snapshots/
      </nexus.snapshot.repository>
      <nexus.release.repository>https://artifacts.camunda.com/artifactory/zeebe-io/
      </nexus.release.repository>

      <!-- Zeebe Community License v1.1 header -->
      <!--suppress UnresolvedMavenProperty -->
      <license.header>${maven.multiModuleProjectDirectory}/COPYING-HEADER.txt</license.header>

      <!-- project dependencies -->
      <version.zeebe>8.6.5</version.zeebe>
      <version.log4j>2.20.0</version.log4j>
      <version.junit>5.11.3</version.junit>
      <versin.assertj>3.26.3</versin.assertj>
      <version.testcontainers>1.20.4</version.testcontainers>
      <version.zeebe-test-container>3.6.5</version.zeebe-test-container>
      <version.awaitility>4.2.2</version.awaitility>
      <version.checkstyle>10.20.2</version.checkstyle>
      <version.revapi>0.28.1</version.revapi>
      <version.clickhouse-jdbc>0.6.5</version.clickhouse-jdbc>
      <version.commons-io>2.18.0</version.commons-io>
      <version.commons-lang3>3.17.0</version.commons-lang3>

      <!-- plugin version -->
      <plugin.version.animal-sniffer>1.24</plugin.version.animal-sniffer>
      <plugin.version.assembly>3.7.1</plugin.version.assembly>
      <plugin.version.compiler>3.13.0</plugin.version.compiler>
      <plugin.version.checkstyle>3.5.0</plugin.version.checkstyle>
      <plugin.version.clean>3.4.0</plugin.version.clean>
      <plugin.version.dependency>3.1.2</plugin.version.dependency>
      <plugin.version.enforcer>3.5.0</plugin.version.enforcer>
      <plugin.version.failsafe>3.5.2</plugin.version.failsafe>
      <plugin.version.fmt>2.24</plugin.version.fmt>
      <plugin.version.gpg>3.2.7</plugin.version.gpg>
      <plugin.version.javadoc>3.11.1</plugin.version.javadoc>
      <plugin.version.license>4.6</plugin.version.license>
      <plugin.version.protobuf>0.6.1</plugin.version.protobuf>
      <plugin.version.proto-compat>1.0.6</plugin.version.proto-compat>
      <plugin.version.revapi>0.15.0</plugin.version.revapi>
      <plugin.version.surefire>3.5.2</plugin.version.surefire>

      <!-- maven extensions -->
      <extension.version.os-maven-plugin>1.6.1</extension.version.os-maven-plugin>

      <!-- disable jdk8 javadoc checks on release build -->
      <additionalparam>-Xdoclint:none</additionalparam>

      <!--
        you can use the following to disable specific checks. the approach taken is to use a single
        new property, skipChecks, which is the default value for pre-defined properties such as
        checkstyle.skip. that way, you can use skipChecks, but you can also still use checkstyle.skip
        if you only want to disable checkstyle
        -->
      <skipChecks>false</skipChecks>
      <checkstyle.skip>${skipChecks}</checkstyle.skip>
      <dependency-check.skip>${skipChecks}</dependency-check.skip>
      <enforcer.skip>${skipChecks}</enforcer.skip>
      <mdep.analyze.skip>${skipChecks}</mdep.analyze.skip>
      <revapi.skip>${skipChecks}</revapi.skip>
      <spotless.check.skip>${skipChecks}</spotless.check.skip>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>io.camunda</groupId>
                <artifactId>zeebe-bom</artifactId>
                <version>${version.zeebe}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <dependency>
              <groupId>org.junit</groupId>
              <artifactId>junit-bom</artifactId>
              <version>${version.junit}</version>
              <type>pom</type>
              <scope>import</scope>
            </dependency>
            <dependency>
              <groupId>org.testcontainers</groupId>
              <artifactId>testcontainers-bom</artifactId>
              <version>${version.testcontainers}</version>
              <type>pom</type>
              <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>io.camunda</groupId>
            <artifactId>zeebe-exporter-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <!--ClickHouse Driver-->
        <dependency>
            <groupId>com.clickhouse</groupId>
            <artifactId>clickhouse-jdbc</artifactId>
            <version>${version.clickhouse-jdbc}</version>
            <classifier>http</classifier>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${version.commons-io}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${version.commons-lang3}</version>
        </dependency>

        <!-- test -->
        <dependency>
          <groupId>org.testcontainers</groupId>
          <artifactId>testcontainers</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.testcontainers</groupId>
          <artifactId>clickhouse</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>io.zeebe</groupId>
          <artifactId>zeebe-test-container</artifactId>
          <version>${version.zeebe-test-container}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.testcontainers</groupId>
          <artifactId>junit-jupiter</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.junit.jupiter</groupId>
          <artifactId>junit-jupiter-api</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.assertj</groupId>
          <artifactId>assertj-core</artifactId>
          <version>${versin.assertj}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.awaitility</groupId>
          <artifactId>awaitility</artifactId>
          <version>${version.awaitility}</version>
          <scope>test</scope>
        </dependency>
    </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <!-- compiler -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${plugin.version.compiler}</version>
        </plugin>

        <!-- JAVADOC -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${plugin.version.javadoc}</version>
          <configuration>
            <source>${version.java}</source>
          </configuration>
        </plugin>

        <!-- LICENSE PLUGIN -->
        <plugin>
          <groupId>com.mycila</groupId>
          <artifactId>license-maven-plugin</artifactId>
          <version>${plugin.version.license}</version>
          <configuration>
            <header>${license.header}</header>
            <properties>
              <owner>camunda services GmbH</owner>
              <email>info@camunda.com</email>
            </properties>
            <includes>
              <include>**/*.java</include>
            </includes>
            <mapping>
              <java>SLASHSTAR_STYLE</java>
            </mapping>
          </configuration>
          <executions>
            <execution>
              <id>add-license</id>
              <phase>compile</phase>
              <goals>
                <goal>format</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- CHECKSTYLE -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>${plugin.version.checkstyle}</version>
          <!-- dependency on build tool to reference the checkstyle cfg -->
          <dependencies>
            <dependency>
              <groupId>io.camunda</groupId>
              <artifactId>zeebe-build-tools</artifactId>
              <version>${version.zeebe}</version>
            </dependency>
            <dependency>
              <groupId>com.puppycrawl.tools</groupId>
              <artifactId>checkstyle</artifactId>
              <version>${version.checkstyle}</version>
            </dependency>
          </dependencies>
          <configuration>
            <configLocation>check/.checkstyle.xml</configLocation>
            <includeTestSourceDirectory>true</includeTestSourceDirectory>
            <encoding>UTF-8</encoding>
            <failOnViolation>true</failOnViolation>
            <sourceDirectories>
              <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>
              <sourceDirectory>${project.build.testSourceDirectory}</sourceDirectory>
            </sourceDirectories>
          </configuration>
          <executions>
            <execution>
              <id>validate-java</id>
              <phase>validate</phase>
              <goals>
                <goal>check</goal>
              </goals>
              <configuration>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- unit tests -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${plugin.version.surefire}</version>
          <configuration>
            <failIfNoTests>false</failIfNoTests>
            <trimStackTrace>false</trimStackTrace>
            <redirectTestOutputToFile>true</redirectTestOutputToFile>
            <properties>
              <configurationParameters>
                junit.jupiter.execution.parallel.enabled = true
                junit.jupiter.execution.parallel.mode.default = same_thread
                junit.jupiter.execution.parallel.config.strategy = dynamic
                junit.jupiter.execution.parallel.config.dynamic.factor = 2
              </configurationParameters>
            </properties>
          </configuration>
        </plugin>

        <!-- integration tests -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${plugin.version.failsafe}</version>
          <configuration>
            <failIfNoTests>false</failIfNoTests>
            <trimStackTrace>false</trimStackTrace>
            <redirectTestOutputToFile>true</redirectTestOutputToFile>
            <properties>
              <configurationParameters>
                junit.jupiter.execution.parallel.enabled = true
                junit.jupiter.execution.parallel.mode.default = same_thread
                junit.jupiter.execution.parallel.config.strategy = dynamic
                junit.jupiter.execution.parallel.config.dynamic.factor = 2
              </configurationParameters>
            </properties>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- Google code format plugin -->
        <plugin>
          <groupId>com.spotify.fmt</groupId>
          <artifactId>fmt-maven-plugin</artifactId>
          <version>${plugin.version.fmt}</version>
          <executions>
            <execution>
              <goals>
                <goal>format</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- jar with dependency assembly -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>${plugin.version.assembly}</version>
        </plugin>

        <!-- enforce unique dependencies and convergence -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${plugin.version.enforcer}</version>
          <executions>
            <execution>
              <id>enforce-dependency-convergence</id>
              <goals>
                <goal>enforce</goal>
              </goals>
              <configuration>
                <!-- see more https://maven.apache.org/enforcer/enforcer-rules/index.html -->
                <rules>
                  <banDuplicatePomDependencyVersions />
                  <requireJavaVersion>
                    <version>[11,)</version>
                  </requireJavaVersion>
                  <requireMavenVersion>
                    <version>[3.6,)</version>
                  </requireMavenVersion>
                </rules>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- enforce version of clean plugin -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>${plugin.version.clean}</version>
        </plugin>

        <!-- compatibility checks/guard -->
        <plugin>
          <groupId>org.revapi</groupId>
          <artifactId>revapi-maven-plugin</artifactId>
          <version>${plugin.version.revapi}</version>
          <dependencies>
            <dependency>
              <groupId>org.revapi</groupId>
              <artifactId>revapi-java</artifactId>
              <version>${version.revapi}</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <phase>verify</phase>
              <id>check</id>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <checkDependencies>true</checkDependencies>
            <expandProperties>true</expandProperties>
            <failOnMissingConfigurationFiles>true</failOnMissingConfigurationFiles>
            <analysisConfigurationFiles combine.children="append">
              <configurationFile>
                <!--suppress UnresolvedMavenProperty -->
                <path>${maven.multiModuleProjectDirectory}/revapi.json</path>
              </configurationFile>
            </analysisConfigurationFiles>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>animal-sniffer-maven-plugin</artifactId>
          <version>${plugin.version.animal-sniffer}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <outputDirectory>${project.build.directory}</outputDirectory>
        </configuration>
        <executions>
          <execution>
            <id>assemble-all</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
          <execution>
            <id>assemble-for-jib</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/jib</outputDirectory>
              <finalName>${project.artifactId}</finalName>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- copies the exporter jar-with-dependencies to a well known location such that it can be
     mounted in the container -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>io.zeebe.clickhouse</groupId>
                  <artifactId>zeebe-clickhouse-exporter</artifactId>
                  <version>${project.version}</version>
                  <type>jar</type>
                  <classifier>jar-with-dependencies</classifier>
                  <outputDirectory>${project.basedir}/src/test/resources</outputDirectory>
                  <destFileName>zeebe-clickhouse-exporter.jar</destFileName>
                </artifactItem>
              </artifactItems>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>com.spotify.fmt</groupId>
        <artifactId>fmt-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>community-action-maven-release</id>
      <properties>
        <skipChecks>true</skipChecks>
        <performRelease>true</performRelease>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>${plugin.version.gpg}</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <!-- Prevent gpg from using pinentry programs -->
              <gpgArguments>
                <arg>--pinentry-mode</arg>
                <arg>loopback</arg>
              </gpgArguments>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <repositories>
    <repository>
      <id>zeebe</id>
      <name>Zeebe Repository</name>
      <url>https://artifacts.camunda.com/artifactory/zeebe-io/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>

    <repository>
      <id>zeebe-snapshots</id>
      <name>Zeebe Snapshot Repository</name>
      <url>https://artifacts.camunda.com/artifactory/zeebe-io-snapshots/</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <scm>
    <url>https://github.com/camunda-community-hub/zeebe-clickhouse-exporter</url>
    <connection>scm:git:git@github.com:camunda-community-hub/zeebe-clickhouse-exporter.git</connection>
    <developerConnection>scm:git:git@github.com:camunda-community-hub/zeebe-clickhouse-exporter.git
    </developerConnection>
    <tag>HEAD</tag>
  </scm>
</project>
